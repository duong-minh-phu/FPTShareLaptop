// <auto-generated />
using System;
using BusinessObjects.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(Sep490Context))]
    [Migration("20250410091147_RemoveRelatedPaymentFromWalletTransaction")]
    partial class RemoveRelatedPaymentFromWalletTransaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__Account___AF2760AD7FC46D56");

                    b.HasIndex("RoleId");

                    b.ToTable("Account_Role", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.BorrowContract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<string>("ConditionBorrow")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpectedReturnDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("ItemValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ContractId")
                        .HasName("PK__BorrowCo__C90D3469203F48B6");

                    b.HasIndex("ItemId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowContract", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.BorrowHistory", b =>
                {
                    b.Property<int>("BorrowHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowHistoryId"));

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BorrowHistoryId")
                        .HasName("PK__BorrowHi__1F7C51B55B601E04");

                    b.HasIndex("ItemId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowHistory", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.BorrowRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestId")
                        .HasName("PK__BorrowRe__33A8517A81895B5B");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__19093A0B357CC0CE");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.CompensationTransaction", b =>
                {
                    b.Property<int>("CompensationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompensationId"));

                    b.Property<decimal>("CompensationAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("DepositTransactionId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExtraPaymentRequired")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ReportDamageId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UsedDepositAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CompensationId")
                        .HasName("PK__Compensa__14AB97591221208A");

                    b.HasIndex("ContractId");

                    b.HasIndex("DepositTransactionId");

                    b.HasIndex("ReportDamageId");

                    b.HasIndex("UserId");

                    b.ToTable("CompensationTransaction", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.DepositTransaction", b =>
                {
                    b.Property<int>("DepositId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepositId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepositDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DepositId")
                        .HasName("PK__DepositT__AB60DF710846F698");

                    b.HasIndex("ContractId");

                    b.HasIndex("UserId");

                    b.ToTable("DepositTransaction", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.DonateForm", b =>
                {
                    b.Property<int>("DonateFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonateFormId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DonateQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ImageDonateForm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DonateFormId")
                        .HasName("PK__DonateFo__4F9196347E2BA20A");

                    b.HasIndex("UserId");

                    b.ToTable("DonateForm", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.DonateItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("ConditionItem")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Cpu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPU");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DonateFormId")
                        .HasColumnType("int");

                    b.Property<string>("ItemImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ram")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RAM");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalBorrowedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ItemId")
                        .HasName("PK__DonateIt__727E838B06C0ECE4");

                    b.HasIndex("DonateFormId");

                    b.HasIndex("UserId");

                    b.ToTable("DonateItem", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.FeedbackBorrow", b =>
                {
                    b.Property<int>("FeedbackBorrowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackBorrowId"));

                    b.Property<int>("BorrowHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackBorrowId")
                        .HasName("PK__Feedback__ACD684ADBBEC2341");

                    b.HasIndex("BorrowHistoryId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackBorrow", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.FeedbackProduct", b =>
                {
                    b.Property<int>("FeedbackProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackProductId"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackProductId")
                        .HasName("PK__Feedback__7C6D4B9C3F0EDB68");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackProduct", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.ItemCondition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionId"));

                    b.Property<int>("BorrowHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("CheckedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CheckedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ConditionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ImageURL");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ConditionId")
                        .HasName("PK__ItemCond__37F5C0CFA9C5BD15");

                    b.HasIndex("BorrowHistoryId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("ItemCondition", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.ItemImage", b =>
                {
                    b.Property<int>("ItemImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemImageId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ImageURL");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("ItemImageId")
                        .HasName("PK__ItemImag__09AE3297464CA349");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemImage", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__C3905BCFB5F7EBEE");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceItem")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId")
                        .HasName("PK__OrderDet__57ED0681E1F6FC0C");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__9B556A3847DE06B6");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PaymentMethodId")
                        .HasName("PK__PaymentM__DC31C1D375FDCC0B");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Cpu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPU");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageProduct")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Ram")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RAM");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ProductId")
                        .HasName("PK__Product__B40CC6CD8397B5CF");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ShopId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ImageURL");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductImageId")
                        .HasName("PK__ProductI__07B2B1B804B9F7E0");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__RefreshT__3214EC071104B986");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.RefundTransaction", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("RefundId")
                        .HasName("PK__RefundTr__725AB920C851ED11");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("WalletId");

                    b.ToTable("RefundTransaction", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.ReportDamage", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int>("BorrowHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("ConditionAfterReturn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConditionBeforeBorrow")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DamageFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ImageUrlreport")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ImageURLReport");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ReportId")
                        .HasName("PK__ReportDa__D5BD4805DC04C9DF");

                    b.HasIndex("BorrowHistoryId");

                    b.HasIndex("ItemId");

                    b.ToTable("ReportDamage", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE1A039A7AD6");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.SettlementTransaction", b =>
                {
                    b.Property<int>("SettlementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettlementId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ManagerWalletId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ShopWalletId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SettlementId")
                        .HasName("PK__Settleme__7712545ABD4522CE");

                    b.HasIndex("ManagerWalletId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShopWalletId");

                    b.ToTable("SettlementTransaction", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Shipment", b =>
                {
                    b.Property<int>("ShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipmentId"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EstimatedDeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ShipmentId")
                        .HasName("PK__Shipment__5CAD37EDE9E0C32B");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipment", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShopId"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BusinessLicense")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShopAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ShopPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ShopId")
                        .HasName("PK__Shop__67C557C9C80E05B1");

                    b.HasIndex(new[] { "UserId" }, "UQ__Shop__1788CC4D22073DBF")
                        .IsUnique();

                    b.ToTable("Shop", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("EnrollmentDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentityCard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StudentId")
                        .HasName("PK__Student__32C52B99F0D7E1C8");

                    b.HasIndex(new[] { "UserId" }, "UQ__Student__1788CC4DE28A1826")
                        .IsUnique();

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.TrackingInfo", b =>
                {
                    b.Property<int>("TrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("TrackingId")
                        .HasName("PK__Tracking__3C19EDF141CD11EE");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("TrackingInfo", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Dob")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CC4C567334F5");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletId")
                        .HasName("PK__Wallet__84D4F90EE21594C4");

                    b.HasIndex("UserId");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.WalletTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RelatedPaymentId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId")
                        .HasName("PK__WalletTr__55433A6B187C0FE1");

                    b.HasIndex("RelatedPaymentId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransaction", (string)null);
                });

            modelBuilder.Entity("AccountRole", b =>
                {
                    b.HasOne("BusinessObjects.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Account_R__RoleI__76969D2E");

                    b.HasOne("BusinessObjects.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Account_R__UserI__778AC167");
                });

            modelBuilder.Entity("BusinessObjects.Models.BorrowContract", b =>
                {
                    b.HasOne("BusinessObjects.Models.DonateItem", "Item")
                        .WithMany("BorrowContracts")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK__BorrowCon__ItemI__787EE5A0");

                    b.HasOne("BusinessObjects.Models.BorrowRequest", "Request")
                        .WithMany("BorrowContracts")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK__BorrowCon__Reque__797309D9");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("BorrowContracts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__BorrowCon__UserI__7A672E12");

                    b.Navigation("Item");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.BorrowHistory", b =>
                {
                    b.HasOne("BusinessObjects.Models.DonateItem", "Item")
                        .WithMany("BorrowHistories")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK__BorrowHis__ItemI__7B5B524B");

                    b.HasOne("BusinessObjects.Models.BorrowRequest", "Request")
                        .WithMany("BorrowHistories")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK__BorrowHis__Reque__7C4F7684");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("BorrowHistories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__BorrowHis__UserI__7D439ABD");

                    b.Navigation("Item");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.BorrowRequest", b =>
                {
                    b.HasOne("BusinessObjects.Models.DonateItem", "Item")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK__BorrowReq__ItemI__7E37BEF6");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__BorrowReq__UserI__7F2BE32F");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.CompensationTransaction", b =>
                {
                    b.HasOne("BusinessObjects.Models.BorrowContract", "Contract")
                        .WithMany("CompensationTransactions")
                        .HasForeignKey("ContractId")
                        .IsRequired()
                        .HasConstraintName("FK__Compensat__Contr__00200768");

                    b.HasOne("BusinessObjects.Models.DepositTransaction", "DepositTransaction")
                        .WithMany("CompensationTransactions")
                        .HasForeignKey("DepositTransactionId")
                        .IsRequired()
                        .HasConstraintName("FK__Compensat__Depos__01142BA1");

                    b.HasOne("BusinessObjects.Models.ReportDamage", "ReportDamage")
                        .WithMany("CompensationTransactions")
                        .HasForeignKey("ReportDamageId")
                        .IsRequired()
                        .HasConstraintName("FK__Compensat__Repor__02084FDA");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("CompensationTransactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Compensat__UserI__02FC7413");

                    b.Navigation("Contract");

                    b.Navigation("DepositTransaction");

                    b.Navigation("ReportDamage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.DepositTransaction", b =>
                {
                    b.HasOne("BusinessObjects.Models.BorrowContract", "Contract")
                        .WithMany("DepositTransactions")
                        .HasForeignKey("ContractId")
                        .IsRequired()
                        .HasConstraintName("FK__DepositTr__Contr__03F0984C");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("DepositTransactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__DepositTr__UserI__04E4BC85");

                    b.Navigation("Contract");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.DonateForm", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("DonateForms")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__DonateFor__UserI__05D8E0BE");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.DonateItem", b =>
                {
                    b.HasOne("BusinessObjects.Models.DonateForm", "DonateForm")
                        .WithMany("DonateItems")
                        .HasForeignKey("DonateFormId")
                        .IsRequired()
                        .HasConstraintName("FK__DonateIte__Donat__06CD04F7");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("DonateItems")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__DonateIte__UserI__07C12930");

                    b.Navigation("DonateForm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.FeedbackBorrow", b =>
                {
                    b.HasOne("BusinessObjects.Models.BorrowHistory", "BorrowHistory")
                        .WithMany("FeedbackBorrows")
                        .HasForeignKey("BorrowHistoryId")
                        .IsRequired()
                        .HasConstraintName("FK__FeedbackB__Borro__08B54D69");

                    b.HasOne("BusinessObjects.Models.DonateItem", "Item")
                        .WithMany("FeedbackBorrows")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK__FeedbackB__ItemI__09A971A2");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("FeedbackBorrows")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__FeedbackB__UserI__0A9D95DB");

                    b.Navigation("BorrowHistory");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.FeedbackProduct", b =>
                {
                    b.HasOne("BusinessObjects.Models.OrderDetail", "OrderItem")
                        .WithMany("FeedbackProducts")
                        .HasForeignKey("OrderItemId")
                        .IsRequired()
                        .HasConstraintName("FK__FeedbackP__Order__0B91BA14");

                    b.HasOne("BusinessObjects.Models.Product", "Product")
                        .WithMany("FeedbackProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__FeedbackP__Produ__0C85DE4D");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("FeedbackProducts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__FeedbackP__UserI__0D7A0286");

                    b.Navigation("OrderItem");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.ItemCondition", b =>
                {
                    b.HasOne("BusinessObjects.Models.BorrowHistory", "BorrowHistory")
                        .WithMany("ItemConditions")
                        .HasForeignKey("BorrowHistoryId")
                        .IsRequired()
                        .HasConstraintName("FK__ItemCondi__Borro__0E6E26BF");

                    b.HasOne("BusinessObjects.Models.BorrowContract", "Contract")
                        .WithMany("ItemConditions")
                        .HasForeignKey("ContractId")
                        .IsRequired()
                        .HasConstraintName("FK__ItemCondi__Contr__0F624AF8");

                    b.HasOne("BusinessObjects.Models.DonateItem", "Item")
                        .WithMany("ItemConditions")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK__ItemCondi__ItemI__10566F31");

                    b.HasOne("BusinessObjects.Models.ReportDamage", "Report")
                        .WithMany("ItemConditions")
                        .HasForeignKey("ReportId")
                        .IsRequired()
                        .HasConstraintName("FK__ItemCondi__Repor__114A936A");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("ItemConditions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ItemCondi__UserI__123EB7A3");

                    b.Navigation("BorrowHistory");

                    b.Navigation("Contract");

                    b.Navigation("Item");

                    b.Navigation("Report");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.ItemImage", b =>
                {
                    b.HasOne("BusinessObjects.Models.DonateItem", "Item")
                        .WithMany("ItemImages")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK__ItemImage__ItemI__1332DBDC");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__UserId__14270015");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderDetail", b =>
                {
                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Order__151B244E");

                    b.HasOne("BusinessObjects.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Produ__160F4887");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment", b =>
                {
                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__OrderId__17036CC0");

                    b.HasOne("BusinessObjects.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__Payment__17F790F9");

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("BusinessObjects.Models.Product", b =>
                {
                    b.HasOne("BusinessObjects.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__Categor__18EBB532");

                    b.HasOne("BusinessObjects.Models.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__ShopId__19DFD96B");

                    b.Navigation("Category");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BusinessObjects.Models.ProductImage", b =>
                {
                    b.HasOne("BusinessObjects.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductIm__Produ__1AD3FDA4");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObjects.Models.RefreshToken", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RefreshToken_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.RefundTransaction", b =>
                {
                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("RefundTransactions")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__RefundTra__Order__1CBC4616");

                    b.HasOne("BusinessObjects.Models.Payment", "Payment")
                        .WithMany("RefundTransactions")
                        .HasForeignKey("PaymentId")
                        .IsRequired()
                        .HasConstraintName("FK__RefundTra__Payme__1DB06A4F");

                    b.HasOne("BusinessObjects.Models.Wallet", "Wallet")
                        .WithMany("RefundTransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK__RefundTra__Walle__1EA48E88");

                    b.Navigation("Order");

                    b.Navigation("Payment");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BusinessObjects.Models.ReportDamage", b =>
                {
                    b.HasOne("BusinessObjects.Models.BorrowHistory", "BorrowHistory")
                        .WithMany("ReportDamages")
                        .HasForeignKey("BorrowHistoryId")
                        .IsRequired()
                        .HasConstraintName("FK__ReportDam__Borro__1F98B2C1");

                    b.HasOne("BusinessObjects.Models.DonateItem", "Item")
                        .WithMany("ReportDamages")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK__ReportDam__ItemI__208CD6FA");

                    b.Navigation("BorrowHistory");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("BusinessObjects.Models.SettlementTransaction", b =>
                {
                    b.HasOne("BusinessObjects.Models.Wallet", "ManagerWallet")
                        .WithMany("SettlementTransactionManagerWallets")
                        .HasForeignKey("ManagerWalletId")
                        .IsRequired()
                        .HasConstraintName("FK__Settlemen__Manag__2180FB33");

                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("SettlementTransactions")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Settlemen__Order__22751F6C");

                    b.HasOne("BusinessObjects.Models.Wallet", "ShopWallet")
                        .WithMany("SettlementTransactionShopWallets")
                        .HasForeignKey("ShopWalletId")
                        .IsRequired()
                        .HasConstraintName("FK__Settlemen__ShopW__236943A5");

                    b.Navigation("ManagerWallet");

                    b.Navigation("Order");

                    b.Navigation("ShopWallet");
                });

            modelBuilder.Entity("BusinessObjects.Models.Shipment", b =>
                {
                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Shipment__OrderI__245D67DE");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObjects.Models.Shop", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithOne("Shop")
                        .HasForeignKey("BusinessObjects.Models.Shop", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Shop__UserId__25518C17");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Student", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("BusinessObjects.Models.Student", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Student__UserId__2645B050");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.TrackingInfo", b =>
                {
                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("TrackingInfos")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__TrackingI__Order__2739D489");

                    b.HasOne("BusinessObjects.Models.Shipment", "Shipment")
                        .WithMany("TrackingInfos")
                        .HasForeignKey("ShipmentId")
                        .IsRequired()
                        .HasConstraintName("FK__TrackingI__Shipm__282DF8C2");

                    b.Navigation("Order");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.HasOne("BusinessObjects.Models.Role", "Role")
                        .WithMany("UsersNavigation")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObjects.Models.Wallet", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Wallet__UserId__2A164134");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.WalletTransaction", b =>
                {
                    b.HasOne("BusinessObjects.Models.Payment", "RelatedPayment")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("RelatedPaymentId")
                        .IsRequired()
                        .HasConstraintName("FK__WalletTra__Relat__2B0A656D");

                    b.HasOne("BusinessObjects.Models.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK__WalletTra__Walle__2BFE89A6");

                    b.Navigation("RelatedPayment");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BusinessObjects.Models.BorrowContract", b =>
                {
                    b.Navigation("CompensationTransactions");

                    b.Navigation("DepositTransactions");

                    b.Navigation("ItemConditions");
                });

            modelBuilder.Entity("BusinessObjects.Models.BorrowHistory", b =>
                {
                    b.Navigation("FeedbackBorrows");

                    b.Navigation("ItemConditions");

                    b.Navigation("ReportDamages");
                });

            modelBuilder.Entity("BusinessObjects.Models.BorrowRequest", b =>
                {
                    b.Navigation("BorrowContracts");

                    b.Navigation("BorrowHistories");
                });

            modelBuilder.Entity("BusinessObjects.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BusinessObjects.Models.DepositTransaction", b =>
                {
                    b.Navigation("CompensationTransactions");
                });

            modelBuilder.Entity("BusinessObjects.Models.DonateForm", b =>
                {
                    b.Navigation("DonateItems");
                });

            modelBuilder.Entity("BusinessObjects.Models.DonateItem", b =>
                {
                    b.Navigation("BorrowContracts");

                    b.Navigation("BorrowHistories");

                    b.Navigation("BorrowRequests");

                    b.Navigation("FeedbackBorrows");

                    b.Navigation("ItemConditions");

                    b.Navigation("ItemImages");

                    b.Navigation("ReportDamages");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");

                    b.Navigation("RefundTransactions");

                    b.Navigation("SettlementTransactions");

                    b.Navigation("Shipments");

                    b.Navigation("TrackingInfos");
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderDetail", b =>
                {
                    b.Navigation("FeedbackProducts");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment", b =>
                {
                    b.Navigation("RefundTransactions");

                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("BusinessObjects.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BusinessObjects.Models.Product", b =>
                {
                    b.Navigation("FeedbackProducts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("BusinessObjects.Models.ReportDamage", b =>
                {
                    b.Navigation("CompensationTransactions");

                    b.Navigation("ItemConditions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Role", b =>
                {
                    b.Navigation("UsersNavigation");
                });

            modelBuilder.Entity("BusinessObjects.Models.Shipment", b =>
                {
                    b.Navigation("TrackingInfos");
                });

            modelBuilder.Entity("BusinessObjects.Models.Shop", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Navigation("BorrowContracts");

                    b.Navigation("BorrowHistories");

                    b.Navigation("BorrowRequests");

                    b.Navigation("CompensationTransactions");

                    b.Navigation("DepositTransactions");

                    b.Navigation("DonateForms");

                    b.Navigation("DonateItems");

                    b.Navigation("FeedbackBorrows");

                    b.Navigation("FeedbackProducts");

                    b.Navigation("ItemConditions");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Shop");

                    b.Navigation("Student");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("BusinessObjects.Models.Wallet", b =>
                {
                    b.Navigation("RefundTransactions");

                    b.Navigation("SettlementTransactionManagerWallets");

                    b.Navigation("SettlementTransactionShopWallets");

                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
